name: AI Twitter Bot

on:
  # Run every hour
  schedule:
    - cron: '0 * * * *'  # Every hour at minute 0
  
  # Allow manual trigger
  workflow_dispatch:
  
  # Run on push for testing (remove in production)
  push:
    branches: [ main ]

jobs:
  run-bot:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
        # Download NLTK data for TextBlob (if needed)
        python -c "import nltk; nltk.download('punkt'); nltk.download('brown')"
    
    - name: Create necessary directories
      run: |
        mkdir -p media
        mkdir -p logs
    
    - name: Run Twitter Bot
      env:
        # Twitter API credentials
        TWITTER_BEARER_TOKEN: ${{ secrets.TWITTER_BEARER_TOKEN }}
        TWITTER_CONSUMER_KEY: ${{ secrets.TWITTER_CONSUMER_KEY }}
        TWITTER_CONSUMER_SECRET: ${{ secrets.TWITTER_CONSUMER_SECRET }}
        TWITTER_ACCESS_TOKEN: ${{ secrets.TWITTER_ACCESS_TOKEN }}
        TWITTER_ACCESS_TOKEN_SECRET: ${{ secrets.TWITTER_ACCESS_TOKEN_SECRET }}
        
        # Gemini API credential
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        
        # Python path
        PYTHONPATH: ${{ github.workspace }}
      run: |
        python bot.py
        
    - name: Upload logs (on failure)
      if: failure()
      uses: actions/upload-artifact@v3
      with:
        name: bot-logs
        path: |
          bot.log
          *.log
        retention-days: 7
    
    - name: Clean up temporary files
      if: always()
      run: |
        # Clean up sensitive files if any
        rm -f *.tmp
        rm -f temp_*
        
        # Keep media files but limit size
        if [ -d "media" ]; then
          find media -type f -size +10M -delete
          find media -type f -mtime +7 -delete
        fi

# Additional workflow for daily thread (optional - can be combined with hourly)
---
name: Daily Thread Bot

on:
  # Run once daily at 9 AM UTC
  schedule:
    - cron: '0 9 * * *'
  
  # Allow manual trigger
  workflow_dispatch:

jobs:
  daily-thread:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        python -c "import nltk; nltk.download('punkt'); nltk.download('brown')"
    
    - name: Run Daily Thread Bot
      env:
        TWITTER_BEARER_TOKEN: ${{ secrets.TWITTER_BEARER_TOKEN }}
        TWITTER_CONSUMER_KEY: ${{ secrets.TWITTER_CONSUMER_KEY }}
        TWITTER_CONSUMER_SECRET: ${{ secrets.TWITTER_CONSUMER_SECRET }}
        TWITTER_ACCESS_TOKEN: ${{ secrets.TWITTER_ACCESS_TOKEN }}
        TWITTER_ACCESS_TOKEN_SECRET: ${{ secrets.TWITTER_ACCESS_TOKEN_SECRET }}
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        PYTHONPATH: ${{ github.workspace }}
        
        # Environment variable to force thread creation
        FORCE_DAILY_THREAD: "true"
      run: |
        python -c "
        from bot import TwitterBot
        import os
        
        bot = TwitterBot()
        
        # Force thread creation for daily run
        if os.getenv('FORCE_DAILY_THREAD') == 'true':
            # Remove today's thread flag to force creation
            import glob
            import datetime
            flag_pattern = f'thread_posted_{datetime.datetime.now().date()}.flag'
            for flag_file in glob.glob(flag_pattern):
                os.remove(flag_file)
        
        bot.run()
        "
